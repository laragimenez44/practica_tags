Guia de ejercicio 3:
Programación 2 2022
Tecnicatura en desarrollo de software
Instituto técnico superior córdoba - Anexo villa el libertador
Prof: Matías Bordone
Estudiantes:Lara Anahí Giménez 

1) Escriban los valores de las variables para las primeras 5 ejecuciones del for en las siguientes funciones 

a) 
n = 1000
sumatorio = 0
for i in range (1,n+1):
	sumatorio = sumatorio +1
print sumatorio

n= 1000 sumatorio= 1 i= 1 sumatorio + 1= 2
n= 1000 sumatoria= 2 i= 2 sumatoria + 1= 3
n= 1000 sumatoria= 3 i= 3 sumatoria + 1= 4
n= 1000 sumatoria= 4 i= 4 sumatoria + 1= 5
n= 1000 sumatoria= 5 i= 5 sumatoria + 1= 6

b) 
n = 7
primo = True
for divisor in range (2,n):
	if n % divisor == 0:
		primo = False

1)divisor = 2, n= 7, primo=True
2) divisor= 3, n=7, primo= True
3)divisor= 4, n=7, primo= True
4)divisor= 5, n=7, primo= True
5)divisor= 6, n=7, primo= True
		

c*)
n = 10
pares = 0
for i in range (0,n+1):
    if i % 2 == 0:
        pares = pares + 1

1)n= 10 pares=0 i= 0 divisor= 2 pares+ 1 = 1
2)n= 10 pares=1 i= 1 divisor= 2 pares= 1 + 0 = 1
3)n= 10 pares=1 i= 2 divisor= 2 pares= 1 + 1 = 2
4)n= 10 pares=2 i= 3 divisor= 2 pares= 2
5)n= 10 pares=2 i= 4 divisor= 2 pares= 2 + 1= 3
6)n= 10 pares=3 i= 5 divisor= 2 pares= 3

2) Escribir los programas del punto 2 como como while
a)
n= 1000
sumatorio = 0
i= 1
while i < n + 1:
    sumatorio = sumatorio+ 1
i = i + 1

b)
n=7
primo= True
divisor=2
while divisor < n:
    if n% divisor ==0:
        primo= False
    divisor=divisor+1
print(primo)

c*)
n=10
pares=0
i=0
while i < 11:
    if i % 2 == 0:
        pares= pares +1
    i= i+1
print (pares)

3) Defina las siguientes fucinones
a) definir una funcion que cuente la cantidad de veces que aparece un numero en una lista

elem=0
def cantidad_de_numeros (lista:list, index: elem) -> int:
      count= 0
      for elem in lista:
            if elem == index:
                count=count + 1
      return count

assert cantidad_de_numeros ([1,1,2,1,1],1) == 4 
assert cantidad_de_numeros ([0,27,5,27],27) == 2
assert cantidad_de_numeros ([0,5],0) == 1

b) definir una funcion que diga si aparece un elemento en una lista

elem=0
def hay_un_elemento (x:list, l:elem) -> bool:
      suma = 0
      for elem in x:
            if elem == l:
                  suma= suma + 1
            else:
                  elem != l
                  return False
      return True

assert hay_un_elemento ([2,3,1,5],1) == True
assert hay_un_elemento ([9,3,8,6],10) == False

elem=0
def hay_un_elemento (x:list, l:elem) -> bool:
      for elemento in x:
            if elemento  == elem:
                return false
            else:
                elemento == elem
                return True

assert hay_un_elemento ([0,2,3,1,5],0) == True
assert hay_un_elemento ([9,3,8,6],10) == False

c*) definir una funcion que cuente la cantidad de veces que aparece un numero mayor a n en una lista

def es_mayor_a_N (l: list ,n: int) -> int:
    contador= 0
    for elemento in l:
         if elemento > n:
                contador= contador + 1
         else:
            if elemento <= n:
                contador== contador
    return contador


assert es_mayor_a_N ([1,4,7,9,3], 7) == 1
assert es_mayor_a_N ([1,5,11,0,3], 12) == 0 #ningun elemento es mayor a n (12)
assert es_mayor_a_N ([0,5,8,10,3], 3) == 3

al escribir la función escriba:
+ los tipos de datos que come y que devuelve la función
+ escriba al menos 2 "asserts" condiciones de ejemplo de lo que deberia devolver la funcion

